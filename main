import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class BrickBreakerGame extends Application {

    // Game constants
    private static final int WIDTH = 800;
    private static final int HEIGHT = 600;
    private static final int PADDLE_WIDTH = 100;
    private static final int PADDLE_HEIGHT = 20;
    private static final int BALL_RADIUS = 10;
    private static final int BRICK_WIDTH = 80;
    private static final int BRICK_HEIGHT = 30;
    private static final int BRICK_ROWS = 5;
    private static final int BRICK_COLUMNS = 10;
    private static final int BRICK_GAP = 2;
    private static final int PADDLE_SPEED = 8;
    private static final int BALL_SPEED = 5;

    // Game variables
    private double paddleX = WIDTH / 2 - PADDLE_WIDTH / 2;
    private double ballX = WIDTH / 2;
    private double ballY = HEIGHT - PADDLE_HEIGHT - BALL_RADIUS;
    private double ballXSpeed = BALL_SPEED;
    private double ballYSpeed = -BALL_SPEED;
    private boolean[] keysPressed = new boolean[256];
    private boolean[][] bricks = new boolean[BRICK_COLUMNS][BRICK_ROWS];

    @Override
    public void start(Stage primaryStage) {
        Canvas canvas = new Canvas(WIDTH, HEIGHT);
        GraphicsContext gc = canvas.getGraphicsContext2D();
        setupBricks();

        AnimationTimer timer = new AnimationTimer() {
            @Override
            public void handle(long now) {
                update();
                render(gc);
            }
        };
        timer.start();

        Scene scene = new Scene(new StackPane(canvas));
        scene.setOnKeyPressed(event -> keysPressed[event.getCode().ordinal()] = true);
        scene.setOnKeyReleased(event -> keysPressed[event.getCode().ordinal()] = false);

        primaryStage.setScene(scene);
        primaryStage.setTitle("Brick Breaker Game");
        primaryStage.show();
    }

    private void setupBricks() {
        for (int i = 0; i < BRICK_COLUMNS; i++) {
            for (int j = 0; j < BRICK_ROWS; j++) {
                bricks[i][j] = true;
            }
        }
    }

    private void update() {
        movePaddle();
        moveBall();
        checkCollisions();
    }

    private void movePaddle() {
        if (keysPressed[KeyCode.LEFT.ordinal()] && paddleX > 0) {
            paddleX -= PADDLE_SPEED;
        }
        if (keysPressed[KeyCode.RIGHT.ordinal()] && paddleX < WIDTH - PADDLE_WIDTH) {
            paddleX += PADDLE_SPEED;
        }
    }

    private void moveBall() {
        ballX += ballXSpeed;
        ballY += ballYSpeed;

        if (ballX - BALL_RADIUS <= 0 || ballX + BALL_RADIUS >= WIDTH) {
            ballXSpeed = -ballXSpeed;
        }
        if (ballY - BALL_RADIUS <= 0) {
            ballYSpeed = -ballYSpeed;
        }
        if (ballY + BALL_RADIUS >= HEIGHT - PADDLE_HEIGHT && ballX >= paddleX && ballX <= paddleX + PADDLE_WIDTH) {
            ballYSpeed = -ballYSpeed;
        }
    }

    private void checkCollisions() {
        // Check collisions with bricks
        for (int i = 0; i < BRICK_COLUMNS; i++) {
            for (int j = 0; j < BRICK_ROWS; j++) {
                if (bricks[i][j]) {
                    double brickX = i * (BRICK_WIDTH + BRICK_GAP);
                    double brickY = j * (BRICK_HEIGHT + BRICK_GAP);
                    if (ballX >= brickX && ballX <= brickX + BRICK_WIDTH &&
                            ballY >= brickY && ballY <= brickY + BRICK_HEIGHT) {
                        bricks[i][j] = false;
                        ballYSpeed = -ballYSpeed;
                    }
                }
            }
        }
    }

    private void render(GraphicsContext gc) {
        // Clear canvas
        gc.setFill(Color.WHITE);
        gc.fillRect(0, 0, WIDTH, HEIGHT);

        // Draw bricks
        for (int i = 0; i < BRICK_COLUMNS; i++) {
            for (int j = 0; j < BRICK_ROWS; j++) {
                if (bricks[i][j]) {
                    double brickX = i * (BRICK_WIDTH + BRICK_GAP);
                    double brickY = j * (BRICK_HEIGHT + BRICK_GAP);
                    gc.setFill(Color.BLUE);
                    gc.fillRect(brickX, brickY, BRICK_WIDTH, BRICK_HEIGHT);
                }
            }
        }

        // Draw paddle
        gc.setFill(Color.RED);
        gc.fillRect(paddleX, HEIGHT - PADDLE_HEIGHT, PADDLE_WIDTH, PADDLE_HEIGHT);

        // Draw ball
        gc.setFill(Color.GREEN);
        gc.fillOval(ballX - BALL_RADIUS, ballY - BALL_RADIUS, BALL_RADIUS * 2, BALL_RADIUS * 2);
    }

    public static void main(String[] args) {
        launch(args);
    }
}
